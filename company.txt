CREATE TABLE EMPLOYEE (
    SSN VARCHAR(255) PRIMARY KEY,
    Name VARCHAR(255),
    Address VARCHAR(255),
    Sex CHAR(1),
    Salary INT,
    SuperSSN VARCHAR(255),
    DNo INT,
    FOREIGN KEY (SuperSSN) REFERENCES EMPLOYEE(SSN),
);

CREATE TABLE DEPARTMENT (
    DNo INT PRIMARY KEY,
    DName VARCHAR(255),
    MgrSSN VARCHAR(255),
    MgrStartDate DATE,
    FOREIGN KEY (MgrSSN) REFERENCES EMPLOYEE(SSN)
);

CREATE TABLE DLOCATION (
    DNo INT PRIMARY KEY,
    DLoc VARCHAR(255),
    FOREIGN KEY (DNo) REFERENCES DEPARTMENT(DNo)
);

CREATE TABLE PROJECT (
    PNo INT PRIMARY KEY,
    PName VARCHAR(255),
    PLocation VARCHAR(255),
    DNo INT,
    FOREIGN KEY (DNo) REFERENCES DEPARTMENT(DNo)
);

CREATE TABLE WORKS_ON (
    SSN VARCHAR(255),
    PNo INT,
    Hours INT,
    PRIMARY KEY (SSN, PNo),
    FOREIGN KEY (SSN) REFERENCES EMPLOYEE(SSN),
    FOREIGN KEY (PNo) REFERENCES PROJECT(PNo)
);

-- Insert into EMPLOYEE
INSERT INTO EMPLOYEE VALUES
('111-11-1111', 'John Smith', '123 Main St', 'M', 80000, NULL, 1),
('222-22-2222', 'Jane Doe', '456 Oak St', 'F', 75000, '111-11-1111', 2),
('333-33-3333', 'Scott', '789 Pine St', 'M', 70000, '111-11-1111', 3);

-- Insert into DEPARTMENT
INSERT INTO DEPARTMENT VALUES
(1, 'HR', '111-11-1111', '2023-01-01'),
(2, 'IT', '222-22-2222', '2023-01-01'),
(3, 'Finance', '333-33-3333', '2023-01-01');

-- Insert into DLOCATION
INSERT INTO DLOCATION VALUES
(1, 'New York'),
(2, 'San Francisco'),
(3, 'Chicago');

-- Insert into PROJECT
INSERT INTO PROJECT VALUES
(101, 'Project A', 'NYC', 1),
(102, 'Project B', 'SF', 2),
(103, 'Project C', 'Chicago', 3);

-- Insert into WORKS_ON
INSERT INTO WORKS_ON VALUES
('111-11-1111', 101, 40),
('222-22-2222', 102, 35),
('333-33-3333', 103, 30);

--Make a list of all project numbers for projects that involve an employee whose last name is ‘Scott’, either as a worker or as a manager of the department that controls the project.
SELECT DISTINCT P.PNo
FROM PROJECT P
JOIN WORKS_ON W ON P.PNo = W.PNo
JOIN EMPLOYEE E ON W.SSN = E.SSN
WHERE E.Name = 'Scott'
   OR (E.SSN IN (SELECT MgrSSN FROM DEPARTMENT WHERE DNo = P.DNo) AND E.Name = 'Scott');


--Show the resulting salaries if every employee working on the ‘IoT’ project is given a 10 percent raise.
UPDATE EMPLOYEE
SET Salary = Salary * 1.10
WHERE SSN IN (SELECT SSN FROM WORKS_ON WHERE PNo IN (SELECT PNo FROM PROJECT WHERE PName = 'IoT'));

--Find the sum of the salaries of all employees of the ‘Accounts’ department, as well as the maximum salary, the minimum salary, and the average salary in this department.
SELECT 
    SUM(E.Salary) AS Total_Salary,
    MAX(E.Salary) AS Max_Salary,
    MIN(E.Salary) AS Min_Salary,
    AVG(E.Salary) AS Avg_Salary
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DNo = D.DNo
WHERE D.DName = 'Accounts';

--Retrieve the name of each employee who works on all the projects controlled by department number 5 (use NOT EXISTS operator).
SELECT E.Name
FROM EMPLOYEE E
WHERE NOT EXISTS (
    SELECT P.PNo
    FROM PROJECT P
    WHERE P.DNo = 5
      AND P.PNo NOT IN (SELECT W.PNo FROM WORKS_ON W WHERE W.SSN = E.SSN)
);

--For each department that has more than five employees, retrieve the department number and the number of its employees who are making more than Rs. 6,00,000.
SELECT D.DNo, COUNT(*) AS Employee_Count
FROM DEPARTMENT D
JOIN EMPLOYEE E ON D.DNo = E.DNo
WHERE E.Salary > 600000
GROUP BY D.DNo
HAVING COUNT(*) > 5;

--Create a view that shows the name, department name, and location of all employees.
CREATE VIEW EmployeeDepartmentView AS
SELECT E.Name, D.DName, DL.DLoc
FROM EMPLOYEE E
JOIN DEPARTMENT D ON E.DNo = D.DNo
JOIN DLOCATION DL ON D.DNo = DL.DNo;

--Create a trigger that prevents a project from being deleted if it is currently being worked on by any employee.
delimiter //
CREATE TRIGGER prevent_project_delete
BEFORE DELETE ON PROJECT
FOR EACH ROW
BEGIN
    IF EXISTS (SELECT 1 FROM WORKS_ON WHERE PNo = OLD.PNo) THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot delete project with active employees working on it.';
    END IF;
END;
//
delimiter ;